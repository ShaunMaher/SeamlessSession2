"use strict"

// I'm attempting to make this one module function as the code for both server
//  agent and client agent.  I'm struggling a bit and confusing myself a lot.

var seamlesssession2 = function() {
  if (!this) {
    return new seamlesssession2();
  }

  // Define some constants here that are shared by all the components.
  this.VERSION = "1.0.0";
  this.URI_VERSION = "version";
  this.URI_OPENURI = "open-uri";
  this.URI_NOTIFICATION = "notitfication";
  this.URI_REGISTERSESSION = "registersession";
  this.MODE_CLIENT = 1;
  this.MODE_SESSION = 2;
  this.MODE_SESSIONHOST = 4;
  this.mode = this.MODE_CLIENT;
  this.clientUriBase = '';

  this.sessionMode = function(clientUriBase) {
    this.mode = this.MODE_SESSION;
    this.clientUriBase = clientUriBase;
  }

  this.sessionHostMode = function(clientUriBase) {
    this.mode = this.MODE_SESSIONHOST;
    this.clientUriBase = clientUriBase;
  }

  this.clientMode = function() {
    this.mode = this.MODE_CLIENT;
    this.clientUriBase = '';
  }

  var _client = class {
    constructor(api) {
      this.api = api;
      console.log("constructor: ", this.api);
    }

    version() {
      return this.api.VERSION;
    }

    openUri(req, res) {
      res.send({'error': 'Not yet implemented'});

      //TODO: Open the passed URI with the local default browser
    }

    notification(req, res) {
      res.send({'error': 'Not yet implemented'});

      //TODO: interface with the local notification API and cause a notification
    }

    getType() {
      return this.constructor;
    }
  }

  var _session = class {
    constructor(api) {
      this.api = api;
      this.clientUriBase = "https://127.0.0.1:3000/";
    }

    version(req, res) {
      res.send({'version': this.api.VERSION});
    }

    openUri(req, res) {
      //TODO: PUT: http://this.clientUriBase/api/this.api.version/this.api.URI_OPENURI?
    }

    getType() {
      return this.constructor;
    }
  }

  var _sessionhost = class {
    constructor(api) {
      this.api = api;
      this.clientUriBase = "https://127.0.0.1:3000/";
    }

    version(req, res) {
      res.send({'version': this.api.VERSION});
    }

    openUri(req, res) {
      //TODO: PUT: http://this.clientUriBase/api/this.api.version/this.api.URI_OPENURI?
    }

    getType() {
      return this.constructor;
    }
  }

  Object.defineProperty(this, "apiDefination", {
    get: function() {
      if (this.mode == this.MODE_CLIENT) {
        let thisClient = new _client(this);
      }
      else if (this.mode == this.MODE_SESSIONHOST) {
        let thisClient = new _sessionhost(this);
      }
      else {
        let thisClient = new _session(this);
      }

      let returnObject = [
        {
          'version': this.VERSION,
          'name': 'seamlesssession2',
          'description': 'seamlesssession2 REST API for communication between client and server agents',
          'properties': {
            'version': {
              'uri': this.URI_VERSION,
              'getter': function(req, res) {
                let replyObject = {'version': thisClient.version.apply(thisClient)};
                res.send(replyObject);
              },
              'description': 'Get the current version of this API'
            }
          },
          'methods': {}
        }];

      if (this.mode == this.MODE_CLIENT) {
        returnObject[0]['methods']['openuri'] = {
          'uri': this.URI_OPENURI,
          'action': function(req, res) {
            thisClient.openUri.apply(thisClient, [req, res]);
          },
          'description': 'Open a URI in a browser on the client\'s PC',
          'params': {
            'uri': ['string', 'The URI to open on the client\'s PC'],
            'newWindow': ['bool', 'Force the URI to be opened in a new window.  Default: false.']
          }
        };
        returnObject[0]['methods']['notification'] = {
          'uri': this.URI_NOTIFICATION,
          'action': function(req, res) {
            thisClient.notification.apply(thisClient, [req, res]);
          },
          'description': 'Display a notification on the client\'s PC',
          'params': {
            'text': ['string', 'The text body of the notification'],
            'title': ['string', 'The text title of the notification.  Not supported by all client notification daemons'],
            'icon': ['string', 'The name of an icon to use'],
            'sound': ['bool', 'Play a notification sound on the client\'s PC.  Default: false.']
          }
        };
      }

      if (this.mode == this.MODE_SESSIONHOST) {
        returnObject[0]['methods']['registersession'] = {
          'uri': this.URI_REGISTERSESSION,
          'action': function(req, res) {
            //todo: thisClient.registersession();
          },
          'description': 'Register a new session in the session broker.'
          'params': {
            'sessionuuid': ['string', 'The unique UUID that identifies this session.'],
            'sessionuri': ['string', 'The URI for connecting to the session\'s agent'],
            'clienturi': ['string', 'The URI for connecting to the client\'s agent']
          }
        }
      }
      return returnObject;
    }
  });
}

module.exports = new seamlesssession2();
module.exports.client = seamlesssession2._client;
module.exports.server = seamlesssession2._session;
module.exports.server = seamlesssession2._sessionhost;
