#!/usr/bin/env node
"use strict"

/**
 * Module dependencies.
 */

var app = require('../lib/app');
var debug = require('debug')('client:server');
var http = require('http');
const url = require('url');
const WebSocket = require('ws');

// view engine setup
app.set('views', 'views');
app.set('view engine', 'jade');

// index (web root) handler
var index = require('../routes/index');
app.use('/', index);

// Load apis into their own name space
var api = require('../routes/api');
app.use('/api', api);

// Add the APIs we will be presenting.  I need to get better at naming objects.
var seamlesssession2Init = require('seamlesssession2');
//var seamlesssession2 = new seamlesssession2Init(seamlesssession2Init.MODE_SESSION);
//var ssSession = new seamlesssession2Init.session();
//console.log(seamlesssession2Init)
var ssSession = new seamlesssession2Init.session("ws://127.0.0.1:3002/api/seamlesssession2/1.0.0/");
api.add(ssSession);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const wss = new WebSocket.Server({ server });

wss.on('connection', function connection(ws) {
  const location = url.parse(ws.upgradeReq.url, true);

  ws.on('message', function incoming(message) {
    console.log('ws.onMessage: received:', message);
  });

  ws.send('hello');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', (onListening).bind(api));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);

  console.log(this.apis[0]);
  console.log('About to try to register a sesson...');
  ssSession.registerSession(null, 'SeSsIoNuUiD', 'shaun.maher', 'http://127.0.0.1' + ':' + addr.port + '/api/session/' + this.apis[0].version);
}
